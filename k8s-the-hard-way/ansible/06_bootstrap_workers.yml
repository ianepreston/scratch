---

- name: Configure workers
  hosts: workers
  become: true
  vars_files:
    - vars.yml
  tasks:
    # Install OS dependencies
    - ansible.builtin.apt:
        pkg:
          - socat
          - conntrack 
          - ipset
    # Download and extract binaries
    - ansible.builtin.file:
        path: "/home/ipreston/containerd"
        state: "directory"
    - ansible.builtin.unarchive:
        src: "https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz"
        dest: /home/ipreston/containerd
        remote_src: yes
    # Create installation directories
    - ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        owner: root
        group: root
        mode: "0700"
      with_items:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes
        - /var/run/kubernetes
        - /etc/containerd
    # Copy the extracted binaries to the correct location
    - ansible.builtin.copy:
        remote_src: yes
        src: "/home/ipreston/containerd/bin/{{ item }}"
        dest: "/bin/{{ item }}"
        owner: "root"
        group: "root"
        mode: "0777"
      with_items:
        - containerd
        - containerd-shim
        - containerd-shim-runc-v1
        - containerd-shim-runc-v2
        - ctr
    - ansible.builtin.unarchive:
        src: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz"
        dest: "/usr/local/bin"
        remote_src: yes
        mode: "0700"
    - ansible.builtin.unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz"
        dest: "/opt/cni/bin"
        remote_src: yes
    # Download more raw binaries
    - ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
        dest: "/usr/local/bin/runc"
        mode: "0700"
    - ansible.builtin.get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: '0700'
      with_items:
        - kubectl
        - kube-proxy
        - kubelet
    # Create the bridge network configuration file
    - ansible.builtin.copy:
        src: files/10-bridge.conf
        dest: /etc/cni/net.d/10-bridge.conf
    # Create the loopback network configuration file
    - ansible.builtin.copy:
        src: files/99-loopback.conf
        dest: /etc/cni/net.d/99-loopback.conf
    # Create containderd config
    - ansible.builtin.copy:
        src: files/containerd-config.toml
        dest: /etc/containerd/config.toml
    # Create containerd service
    - ansible.builtin.copy:
        src: files/containerd.service
        dest: /etc/systemd/system/containerd.service
    # Configure the kubelet
    - ansible.builtin.copy:
        remote_src: yes
        src: "/home/ipreston/{{ item }}"
        dest: "/var/lib/kubelet/{{ item }}"
      with_items:
        - "{{ ansible_hostname}}-key.pem"
        - "{{ ansible_hostname}}.pem"
    - ansible.builtin.copy:
        remote_src: yes
        src: "/home/ipreston/{{ ansible_hostname }}.kubeconfig"
        dest: "/var/lib/kubelet/kubeconfig"
    - ansible.builtin.copy:
        remote_src: yes
        src: "/home/ipreston/ca.pem"
        dest: "/var/lib/kubernetes/ca.pem"
    - ansible.builtin.template:
        src: templates/kubelet-config.yaml.j2
        dest: /var/lib/kubelet/kubelet-config.yaml
    - ansible.builtin.copy:
        src: files/kubelet.service
        dest: /etc/systemd/system/kubelet.service
    - ansible.builtin.copy:
        remote_src: yes
        src: /home/ipreston/kube-proxy.kubeconfig
        dest: /var/lib/kube-proxy/kubeconfig
    - ansible.builtin.copy:
        src: files/kube-proxy-config.yaml
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml
    - ansible.builtin.copy:
        src: files/kube-proxy.service
        dest: /etc/systemd/system/kube-proxy.service
    # Start the worker services
    - ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        state: started
        name: "{{ item }}"
      with_items:
        - "containerd"
        - "kubelet"
        - "kube-proxy"